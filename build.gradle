
buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
    }
}
plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id "com.modrinth.minotaur" version "2.+"
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'maven-publish'
//apply plugin: 'eclipse'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

version = "${project.mc_version}-${mod_version}"
group = "me.desht.modularrouters"
archivesBaseName = modid

ext.releaseTag = System.getenv('TAG') ?: ""
ext.isAlpha = ext.releaseTag.contains("alpha")
ext.isBeta = ext.releaseTag.contains("beta")

def semver = mod_version
def relType = ext.isAlpha ? "alpha" : (ext.isBeta ? "beta" : "release")
version += System.getenv("BUILD_NUMBER") ?: "-CUSTOM"

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

minecraft {
    mappings channel: 'parchment', version: "2022.11.27-1.19.2"
    runs {
        client {
            workingDirectory file('run')
            property 'forge.logging.markers', 'SCAN,CONFIG'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            ideaModule "${project.name}.main"
            mods {
                modularrouters.sources((SourceSet[]) [sourceSets.main])
            }
        }
        server {
            workingDirectory file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.disableRefMap', 'true'
            ideaModule "${project.name}.main"
            mods {
                modularrouters.sources((SourceSet[]) [sourceSets.main])
            }
        }
        data {
            workingDirectory file('run')
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'
            property 'mixin.env.disableRefMap', 'true'
            ideaModule "${project.name}.main"
            forceExit false
            mods {
                modularrouters.sources((SourceSet[]) [sourceSets.main])
            }
            args '--mod', 'modularrouters', '--all', '--output', file('src/generated/resources/'),
                    '--existing', sourceSets.main.resources.srcDirs[0]
            environment 'target', 'fmluserdevdata'
        }
    }
}

// All jar files from this folder will be added automatically as runtime mod dependencies
def extraModsDir = "extra-mods-${mc_version}"

repositories {
    flatDir {
        name "extra-mods"
        dir file(extraModsDir)
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "JEI"
        url = "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        name = 'Patchouli'
        url = 'https://maven.blamejared.com/'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    implementation fg.deobf("curse.maven:theoneprobe-245211:3871444")
//    compileOnly fg.deobf("mcjty.theoneprobe:theoneprobe:${top_version}:api")
//    runtimeOnly fg.deobf("mcjty.theoneprobe:theoneprobe:${top_version}")

    // compileOnly till jade is updated
    compileOnly fg.deobf("curse.maven:jade-324717:${jade_curse_id}")

    // compile against the JEI API but do not include it at runtime
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
    // at runtime, use the full JEI
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-common:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")

    implementation fg.deobf("curse.maven:mekanism-268560:${project.mekanism_fileId}")

    // Locally sourced extra mods for runtime (i.e. testing) - thanks AE2 for this idea
    for (extraModJar in fileTree(dir: extraModsDir, include: '*.jar')) {
        def basename = extraModJar.name.substring(0, extraModJar.name.length() - ".jar".length())
        def versionSep = basename.lastIndexOf('-')
        assert versionSep != -1
        def artifactId = basename.substring(0, versionSep)
        def version = basename.substring(versionSep + 1)
        runtimeOnly fg.deobf("extra-mods:$artifactId:$version")
    }
}

jar {
    manifest.attributes([
            "Specification-Title": "Modular Routers",
            "Specification-Vendor": "desht",
            "Specification-Version": "38.0", // We are version 1 of the modlauncher specification
            "Implementation-Title": project.name,
            "Implementation-Version": "${project.version}",
            "Implementation-Vendor" :"desht",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ])
    finalizedBy('reobfJar')
}

def mavenVer = ext.releaseTag == "" ? "${project.mc_version}-${semver}-SNAPSHOT" : "${project.mc_version}-${semver}"
publishing {
    publications {
        mavenCommon(MavenPublication) {
            artifactId = rootProject.archivesBaseName
            from components.java
        }
    }
    repositories {
        mavenLocal()
    }
    if (System.getenv("MODMAVEN_USER") != null) {
        publications {
            maven(MavenPublication) {
                groupId = project.group
                artifactId = project.archivesBaseName
                version = mavenVer

                // ForgeGradle will generate wild dependency definitions, see https://github.com/MinecraftForge/ForgeGradle/issues/584
                // Since we don't actually depend on anything, just remove the entire node.
                pom.withXml {
                    asNode().remove(asNode().dependencies)
                }

                from components.java
            }
        }
        repositories {
            maven {
                name = "modmaven"
                credentials {
                    username System.getenv("MODMAVEN_USER")
                    password System.getenv("MODMAVEN_PASSWORD")
                }
                url = "https://modmaven.dev/artifactory/local-releases/"
            }
        }
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "${project.modrinth_project_id}"
    versionNumber = "${project.mc_version}-${semver}"
    versionType = relType
    uploadFile = jar // With Loom, this MUST be set to `remapJar` instead of `jar`!
    gameVersions = ["${mc_version}"] // Must be an array, even with only one version
    changelog = System.getenv("CHANGELOG")
    dependencies { // A special DSL for creating dependencies
        // scope.type
        // The scope can be `required`, `optional`, or `incompatible`
        // The type can either be `project` or `version`
        optional.project "nU0bVIaL"  // Patchouli
    }
}

if (System.getenv("CURSEFORGE_TOKEN")) {
    curseforge {
        apiKey = System.getenv("CURSEFORGE_TOKEN")
        project {
            id = project.curse_project_id
            changelogType = "markdown"
            changelog = System.getenv("CHANGELOG")
            releaseType = relType
            addGameVersion project.mc_version
            addGameVersion "Forge"
            mainArtifact(jar.archiveFile) {
                displayName = "${project.archivesBaseName} v${project.mc_version}-${semver}"
                relations {
                    optionalDependency "patchouli"
                }
            }
        }
    }
}

idea {
    module {
        for (String exclude in ['run', 'out', 'logs']) {
            excludeDirs += file(exclude)
        }
    }
}
